/*
Scss - Functions

Sass Variables & Mix-ins

@package mingo

/*--------------------------------------------------------------
>>> TABLE OF CONTENTS:
----------------------------------------------------------------
1.0 - Media Queries
    1.1 - Above Breakpoint
    1.2 - Below Breakpoint
    1.3 - Between Breakpoints
2.0 - Colors Utilities
3.0 - Font Utilities
4.0 - Elements
5.0 - Centering
6.0 - Transform & Transitions 
--------------------------------------------------------------*/

@use "sass:map";


//1.0 - Media Queries
$breakpoints: (
	xs: 576px,
	sm: 768px,
	md: 1024px,
	lg: 1248px,
	xl: 1548px,
	burger: 1023px
);

//1.1 - Above Breakpoint
@mixin respond-above($breakpoint) {
	@if map.has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map.get($breakpoints, $breakpoint);
		@media (min-width: $breakpoint-value) {
			@content;
		}
	} @else {
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

//1.2 - Below Breakpoint
@mixin respond-below($breakpoint) {
	@if map.has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map.get($breakpoints, $breakpoint);
		@media (max-width: ($breakpoint-value - 1)) {
			@content;
		}
	} @else {
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

//1.3 - Between Breakpoints
@mixin respond-between($lower, $upper) {
	@if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
			$lower-breakpoint: map.get($breakpoints, $lower);
			$upper-breakpoint: map.get($breakpoints, $upper);
		@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
			@content;
		}
	} @else {
		@if (map.has-key($breakpoints, $lower) == false) {
			@warn 'Your lower breakpoint was invalid: #{$lower}.';
		}
		@if (map.has-key($breakpoints, $upper) == false) {
			@warn 'Your upper breakpoint was invalid: #{$upper}.';
		}
	}
}


//2.0 - Colors Utilities



//3.0 - Font Utilities
@mixin font-smoothing($smoothing:antialiased) { 
	-webkit-font-smoothing: $smoothing;
	-moz-font-smoothing: $smoothing;
	-ms-font-smoothing: $smoothing;
	font-smoothing: $smoothing;
}

@function em($target, $context: $base-font-size) {
    @return calc($target / $context) * 1em;
}

@function rem($target) {
	@return calc($target / 16px) * 1rem;
}

@function calculateRem($size) {
	$remSize: calc($size / 16px);
	@return #{$remSize}rem;
}

@mixin font-size($size) {
	font-size: $size; //Fallback in px
	font-size: calculateRem($size); 
}

@mixin headingH1lg($size: 82px, $weight: 600, $spacing: 0.00em, $line-height: 1.12, $font-family: $headline) {
	font-weight: $weight;
	@include font-size($size);
	letter-spacing: $spacing;
	line-height: $line-height;
	font-family: $font-family;
	margin: rem(56px) 0 rem(12px) 0;

	@include respond-below(md) {
		@include font-size(calc($size / 1.4));
	}
}

@mixin headingH1($size: 62px, $weight: 600, $spacing: 0.00em, $line-height: 1.12, $font-family: $headline) {
	font-weight: $weight;
	@include font-size($size);
	letter-spacing: $spacing;
	line-height: $line-height;
	font-family: $font-family;
	margin: rem(56px) 0 rem(12px) 0;

	@include respond-below(md) {
		@include font-size(calc($size / 1.4));
	}
}

@mixin headingH2($size: 48px, $weight: 600, $spacing: 0.00em, $line-height: 1.2, $font-family: $headline) {
	font-weight: $weight;
	@include font-size($size);
	letter-spacing: $spacing;
	line-height: $line-height;
	font-family: $font-family;
	margin: rem(48px) 0 rem(12px) 0;

	@include respond-below(md) {
		@include font-size(calc($size / 1.4));
	}
}

@mixin headingH3($size: 34px, $weight: 600, $spacing: 0.00em, $line-height: 1.2, $font-family: $headline) {
	font-weight: $weight;
	@include font-size($size);
	letter-spacing: $spacing;
	line-height: $line-height;
	font-family: $font-family;
	margin: rem(40px) 0 rem(12px) 0;

	@include respond-below(md) {
		@include font-size(calc($size / 1.4));
	}
}

@mixin headingH4($size: 28px, $weight: 600, $spacing: 0, $line-height: 1.36, $font-family: $headline) {
	font-weight: $weight;
	@include font-size($size);
	letter-spacing: $spacing;
	line-height: $line-height;
	font-family: $font-family;
	margin: rem(32px) 0 rem(12px) 0;

	@include respond-below(md) {
		@include font-size(calc($size / 1.4));
	}
}

@mixin headingH5($size: 24px, $weight: 400, $spacing: 0, $line-height: 1.4, $font-family: $headline) {
	font-weight: $weight;
	@include font-size($size);
	letter-spacing: $spacing;
	line-height: $line-height;
	font-family: $font-family;
	margin: rem(24px) 0 rem(12px) 0;

	@include respond-below(md) {
		// @include font-size(calc($size / 1.4));
	}
}

@mixin headingH6($size: 18px, $weight: 700, $spacing: 0, $line-height: 1.55, $font-family: $headline) {
	font-weight: $weight;
	@include font-size($size);
	letter-spacing: $spacing;
	line-height: $line-height;
	font-family: $font-family;
	margin: rem(24px) 0 rem(12px) 0;

	@include respond-below(md) {
		// @include font-size(calc($size / 1.4));
	}
}




//4.0 - Elements
@mixin close($size:20px,$color:$black,$thickness:1px,$position:relative) {
	display: inline-block;
	height: $size;
	position: $position;
	text-indent: -9999px;
	width: $size;
	&:before,
	&:after {
		border-left: $thickness solid $color;
		content: '';
		display: block;
		height:$size;
		left: 50%;
    position: absolute;
    top: 50%;
		transform: translate(-50%, -50%) rotate(45deg);
	}
	&:after {
		transform: translate(-50%, -50%) rotate(-45deg);
	}	 
}

@mixin burger( $color:$grey,$thickness:2px,$width:25px,$position:relative ) {  
  cursor: pointer;
  position: $position;
  span {
	background: $color;
	display: block;
	height: $thickness;
	left: 50%;
	position: absolute;
	text-indent: -9999px;
	top: 50%;
	-webkit-transition: all .2s ease-in-out;
	-moz-transition: all .2s ease-in-out;
	-ms-transition: all .2s ease-in-out;
	transition: all .2s ease-in-out;
	transform: translate(-50%,-50%);
	width: $width;
    &:before, &:after {
	    background: $color;
		content: '';
		height: $thickness;
		left: 0;
		position: absolute;
		-webkit-transition: all .2s ease-in-out;
		-moz-transition: all .2s ease-in-out;
		-ms-transition: all .2s ease-in-out;
		transition: all .2s ease-in-out;
		width: $width;
    }
    &:before { top: -6px; }
    &:after { top: 6px; }
  }
	&.active {
	  span {
	    background: transparent;
			&:before { 
				transform: rotate(45deg) translate(5px, 4px);
			}
			&:after { 
				transform: rotate(-45deg) translate(5px, -4px); 
			}
	  }
	}
}

@mixin box-sizing($sizing: border-box) {
	-webkit-box-sizing: $sizing;
	-moz-box-sizing: $sizing; 
	-ms-box-sizing: $sizing; 
	box-sizing: $sizing;
}

//5.0 - Centering
@mixin absoluteCenter() {
	left: 50%; 
	position: absolute;
	top: 50%;
	transform: translate(-50%, -50%);
}

@mixin unCenter() {
	left: auto; 
	position: relative;
	top: auto;
	transform: translate(0, 0);
}

//6.0 - Transform & Transitions 
@mixin transform($transforms) {
	-webkit-transform: $transforms;
	-moz-transform: $transforms;
	-ms-transform: $transforms;
	-o-transform: $transforms;
    transform: $transforms;
}

@mixin transition($property:all,$duration:.2s,$timing:linear,$delay:0s) { 
	-webkit-transition: $property $duration $timing $delay; 
	-moz-transition: $property $duration $timing $delay; 
	-ms-transition: $property $duration $timing $delay; 
	transition: $property $duration $timing $delay;
}
  
  
  